{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Source1",
						"type": "DatasetReference"
					},
					"name": "CustomerLocationData"
				},
				{
					"dataset": {
						"referenceName": "DS_source2",
						"type": "DatasetReference"
					},
					"name": "CustomerResponderData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "LS_AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "join1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          {First Name} as string,",
				"          {Last Name} as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as string,",
				"          Lat as string,",
				"          Lon as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CustomerLocationData",
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CustomerResponderData",
				"CustomerLocationData select(mapColumn(",
				"          CustomerID,",
				"          {First Name},",
				"          {Last Name},",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          Lat,",
				"          Lon",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"CustomerResponderData select(mapColumn(",
				"          CustomerId = Column_1,",
				"          Store_Number = Column_2,",
				"          Customer_Segment = Column_3,",
				"          Responder = Column_4",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1, select2 join(select1@CustomerID == select2@CustomerId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select3 sort(asc(CustomerID, true)) ~> sort1",
				"join1 select(mapColumn(",
				"          CustomerID = select1@CustomerID,",
				"          Store_Number,",
				"          Customer_Segment,",
				"          Responder,",
				"          {First Name},",
				"          {Last Name},",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          Lat,",
				"          Lon",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     dateFormat:'dd/MM/yyyy',",
				"     timestampFormat:'dd/MM/yyyy',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}